import React from 'react';
import { screen, waitFor } from '@testing-library/react';
    // Setup mock auth context data
    const authValue = {
      isAuthenticated: true,
      user: { role: 'admin', first_name: 'Admin', last_name: 'User' },
      logout: jest.fn()
    };
    
    // Setup mock tenant context data with error
    const tenantValue = {
      tenants: [],
      loading: false,
      error: 'Failed to load tenants',
      fetchTenants: jest.fn(),
      getTenant: jest.fn(),
      createTenant: jest.fn(),
      updateTenant: jest.fn(),
      deleteTenant: jest.fn()
    };
    
    renderWithProviders(<Tenants />, {
      authValue: authValue,
      tenantValue: tenantValue
    });port Tenants from '../../pages/Tenants';
import axios from 'axios';
import { renderWithProviders } from '../../test-utils/renderWithProviders';

jest.mock('axios');

describe('Tenants', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders tenant rows on success', async () => {
    // Setup mock auth context data
    const authValue = {
      isAuthenticated: true,
      user: { role: 'admin', first_name: 'Admin', last_name: 'User' },
      logout: jest.fn()
    };
    
    // Setup mock tenant context data
    const tenantValue = {
      tenants: [
        { id: 1, name: 'Alice', email: 'alice@ex.com', phone: '111-111' },
        { id: 2, name: 'Bob', email: 'bob@ex.com', phone: '222-222' }
      ],
      loading: false,
      error: null,
      fetchTenants: jest.fn(),
      getTenant: jest.fn(),
      createTenant: jest.fn(),
      updateTenant: jest.fn(),
      deleteTenant: jest.fn()
    };
    
    renderWithProviders(<Tenants />, {
      authValue: authValue,
      tenantValue: tenantValue
    });

    expect(await screen.findByText('Alice')).toBeInTheDocument();
    expect(screen.getByText('alice@ex.com')).toBeInTheDocument();
    expect(screen.getByText('Bob')).toBeInTheDocument();
    expect(screen.getByText('bob@ex.com')).toBeInTheDocument();
  });

  test('shows empty state when no tenants', async () => {
    // Setup mock auth context data
    const authValue = {
      isAuthenticated: true,
      user: { role: 'admin', first_name: 'Admin', last_name: 'User' },
      logout: jest.fn()
    };
    
    // Setup mock tenant context data with empty tenants array
    const tenantValue = {
      tenants: [],
      loading: false,
      error: null,
      fetchTenants: jest.fn(),
      getTenant: jest.fn(),
      createTenant: jest.fn(),
      updateTenant: jest.fn(),
      deleteTenant: jest.fn()
    };
    
    renderWithProviders(<Tenants />, {
      authValue: authValue,
      tenantValue: tenantValue
    });

    expect(await screen.findByText('No tenants found')).toBeInTheDocument();
  });

  test('shows error state on failure', async () => {
    // Setup mock auth context data
    const authValue = {
      isAuthenticated: true,
      user: { role: 'admin', first_name: 'Admin', last_name: 'User' },
      logout: jest.fn()
    };
    
    // Setup mock tenant context with error
    const tenantValue = {
      tenants: [],
      loading: false,
      error: "Error loading tenants",
      fetchTenants: jest.fn(),
      getTenant: jest.fn(),
      createTenant: jest.fn(),
      updateTenant: jest.fn(),
      deleteTenant: jest.fn()
    };
    
    renderWithProviders(<Tenants />, {
      authValue: authValue,
      tenantValue: tenantValue
    });

    expect(await screen.findByText('Error loading tenants')).toBeInTheDocument();
  });
});
