import React from 'react';
import { render, screen, waitFor, act } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { AuthProvider, useAuth } from '../context/AuthContext';
import { MemoryRouter } from 'react-router-dom';
import { withLocalStorage } from '../test-utils/mockLocalStorage';
import { primeAuthSuccess, resetAxios } from '../test-utils/mockApiRoutes';

// Unmock AuthContext for this test file
jest.unmock('../context/AuthContext');

// Mock authApi module that's imported by AuthContext with full implementation
jest.mock('../utils/authApi', () => ({
  login: jest.fn().mockImplementation(() => Promise.resolve({
    data: {
      access_token: 'fake-token',
      refresh_token: 'fake-refresh-token',
      user: { id: 1, email: 'test@example.com' }
    }
  })),
  validateToken: jest.fn().mockResolvedValue({ data: { valid: true } }),
  refreshToken: jest.fn().mockResolvedValue({ data: { access_token: 'refreshed-token' } }),
  logout: jest.fn().mockResolvedValue({ data: { message: 'Logout successful' } }),
  register: jest.fn().mockResolvedValue({ 
    data: { 
      access_token: 'fake-token',
      refresh_token: 'fake-refresh-token',
      user: { id: 1, email: 'test@example.com' }
    } 
  }),
  getCurrentUser: jest.fn().mockResolvedValue({
    data: { id: 1, email: 'test@example.com' }
  })
})); 
    data: { access_token: 'refreshed-token' } 
  })
}));

// Mock api module that's imported by AuthContext
jest.mock('../utils/api', () => ({
  get: jest.fn().mockResolvedValue({ data: {} }),
  post: jest.fn().mockResolvedValue({ data: {} }),
  put: jest.fn().mockResolvedValue({ data: {} })
}));

// Test component that uses auth context
const TestComponent = () => {
  const { user, isAuthenticated, login, logout } = useAuth();
  return (
    <div>
      <div data-testid="auth-status">
        {isAuthenticated ? 'Logged In' : 'Logged Out'}
      </div>
      {user && <div data-testid="user-email">{user.email}</div>}
      <button 
        onClick={() => login({ email: 'test@example.com', password: 'password' })}
        data-testid="login-button"
      >
        Login
      </button>
      <button 
        onClick={logout}
        data-testid="logout-button"
      >
        Logout
      </button>
    </div>
  );
};

describe('AuthContext Integration', () => {
  // Create a real localStorage mock that works properly for auth tests
  const localStorageMock = (function() {
    let store = {};
    return {
      getItem: function(key) {
        return store[key] || null;
      },
      setItem: function(key, value) {
        store[key] = value.toString();
      },
      removeItem: function(key) {
        delete store[key];
      },
      clear: function() {
        store = {};
      }
    };
  })();
  
  beforeEach(() => {
    // Replace the global localStorage mock with our local one
    Object.defineProperty(window, 'localStorage', {
      value: localStorageMock,
      writable: true
    });
    
    // Clear localStorage
    localStorageMock.clear();
    jest.clearAllMocks();
    
    // Setup default axios responses for auth endpoints
    axios.post.mockImplementation((url) => {
      if (url.includes('/auth/login') || url.includes('/api/auth/login')) {
        return Promise.resolve({
          data: {
            access_token: 'fake-token',
            refresh_token: 'fake-refresh-token',
            user: { id: 1, email: 'test@example.com' }
          }
        });
      }
      return Promise.resolve({ data: {} });
    });

    // Mock the axios.get for token validation
    axios.get.mockImplementation((url) => {
      if (url.includes('/auth/verify') || url.includes('/api/auth/verify')) {
        return Promise.resolve({ data: { valid: true } });
      }
      if (url.includes('/auth/me') || url.includes('/api/auth/me')) {
        return Promise.resolve({ data: { id: 1, email: 'test@example.com' } });
      }
      return Promise.resolve({ data: {} });
    });
  });

  test('provides authentication state', () => {
    render(
      <MemoryRouter>
        <AuthProvider>
          <TestComponent />
        </AuthProvider>
      </MemoryRouter>
    );
    
    expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged Out');
  });

  test('handles login', async () => {
    const user = userEvent.setup();
    
    render(
      <MemoryRouter>
        <AuthProvider>
          <TestComponent />
        </AuthProvider>
      </MemoryRouter>
    );
    
    // Verify initial logged out state
    expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged Out');
    
    // Click login
    await user.click(screen.getByTestId('login-button'));
    
    // Verify logged in state - need to wait for the async operation
    await waitFor(() => {
      expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged In');
    }, { timeout: 3000 });
    
    // Check that the user email is displayed
    await waitFor(() => {
      expect(screen.getByTestId('user-email')).toHaveTextContent('test@example.com');
    });

    // Verify that localStorage was updated
    expect(localStorage.getItem('token')).toBe('fake-token');
    expect(localStorage.getItem('refresh_token')).toBe('fake-refresh-token');
    expect(JSON.parse(localStorage.getItem('user'))).toEqual(
      expect.objectContaining({ email: 'test@example.com' })
    );
  });

  test('handles logout', async () => {
    const user = userEvent.setup();
    
    render(
      <MemoryRouter>
        <AuthProvider>
          <TestComponent />
        </AuthProvider>
      </MemoryRouter>
    );
    
    // Login first
    await user.click(screen.getByTestId('login-button'));
    
    // Wait for logged in state 
    await waitFor(() => {
      expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged In');
    }, { timeout: 3000 });

    // Verify localStorage has data
    expect(localStorage.getItem('token')).toBe('fake-token');
    
    // Logout
    await user.click(screen.getByTestId('logout-button'));
    
    // Should be logged out
    await waitFor(() => {
      expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged Out');
    }, { timeout: 3000 });
    
    // Verify localStorage was cleared
    expect(localStorage.getItem('token')).toBeNull();
    expect(localStorage.getItem('user')).toBeNull();
  });
  
  test('handles login failure', async () => {
    // Mock failed login
    axios.post.mockImplementationOnce(() => 
      Promise.reject({ response: { data: { error: 'Invalid credentials' }}})
    );
    
    const user = userEvent.setup();
    
    render(
      <MemoryRouter>
        <AuthProvider>
          <TestComponent />
        </AuthProvider>
      </MemoryRouter>
    );
    
    // Verify initial logged out state
    expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged Out');
    
    // Click login
    await user.click(screen.getByTestId('login-button'));
    
    // Should still be logged out after failed login attempt
    await waitFor(() => {
      expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged Out');
    });
  });
  
  test('restores authentication from localStorage', async () => {
    // Setup localStorage with auth data
    localStorage.setItem('token', 'fake-saved-token');
    localStorage.setItem('refresh_token', 'fake-refresh-token');
    localStorage.setItem('user', JSON.stringify({ id: 2, email: 'saved@example.com' }));
    
    render(
      <MemoryRouter>
        <AuthProvider>
          <TestComponent />
        </AuthProvider>
      </MemoryRouter>
    );
    
    // Should be logged in automatically from localStorage
    await waitFor(() => {
      expect(screen.getByTestId('auth-status')).toHaveTextContent('Logged In');
      expect(screen.getByTestId('user-email')).toHaveTextContent('saved@example.com');
    });
  });
});
