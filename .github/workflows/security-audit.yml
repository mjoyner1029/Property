# .github/workflows/security-audit.yml

name: Security Audit

on:
  schedule:
    - cron: "0 0 * * *"           # Daily at 00:00 UTC
  push:
    branches: [ main ]
    paths:
      - "**/package.json"
      - "**/package-lock.json"
      - "**/requirements.txt"
      - "Pipfile"
      - "Pipfile.lock"
  pull_request:
    branches: [ main ]
    paths:
      - "**/package.json"
      - "**/package-lock.json"
      - "**/requirements.txt"
      - "Pipfile"
      - "Pipfile.lock"
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write   # for SARIF uploads (CodeQL / Trivy)

jobs:
  python-dependencies-audit:
    name: Python Dependencies Audit
    runs-on: ubuntu-latest
    # Run on push/schedule/dispatch. On PRs, only run if the PR has label 'security-audit'.
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security-audit') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Create results dir
        run: mkdir -p security-audit/python

      - name: Install safety & helpers
        run: |
          python -m pip install --upgrade pip
          pip install safety pipenv bandit

      - name: Safety check (root requirements.txt)
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --full-report > security-audit/python/safety-root.txt || true
          fi

      - name: Safety check (backend/requirements.txt)
        run: |
          if [ -f backend/requirements.txt ]; then
            safety check -r backend/requirements.txt --full-report > security-audit/python/safety-backend.txt || true
          fi

      - name: Safety check (Pipfile)
        run: |
          if [ -f Pipfile ]; then
            pipenv requirements > security-audit/python/pipfile-requirements.txt
            safety check -r security-audit/python/pipfile-requirements.txt --full-report > security-audit/python/safety-pipfile.txt || true
          fi

      - name: Bandit (static analysis)
        run: |
          bandit -r backend -f json -o security-audit/python/bandit.json || true

      - name: Upload Python audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-security-audit
          path: security-audit/python

  javascript-dependencies-audit:
    name: JavaScript Dependencies Audit
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security-audit') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create results dir
        run: mkdir -p security-audit/js

      - name: Frontend npm audit
        run: |
          if [ -f frontend/package.json ]; then
            pushd frontend >/dev/null
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
            npm audit --json > ../security-audit/js/frontend-npm-audit.json || true
            popd >/dev/null
          fi

      - name: Frontend-tenant npm audit
        run: |
          if [ -f frontend-tenant/package.json ]; then
            pushd frontend-tenant >/dev/null
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
            npm audit --json > ../security-audit/js/frontend-tenant-npm-audit.json || true
            popd >/dev/null
          fi

      - name: Upload JS audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: js-security-audit
          path: security-audit/js

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security-audit') }}
    strategy:
      fail-fast: false
      matrix:
        language: [ "javascript", "python" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
        continue-on-error: true

  secret-scanning:
    name: Secret Scanning (TruffleHog)
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security-audit') }}
    steps:
      - name: Checkout (full history for diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  docker-image-scan:
    name: Docker Image Security Scan (Trivy)
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security-audit') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check backend Dockerfile
        id: has_backend
        run: |
          if [ -f backend/Dockerfile ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check frontend Dockerfile
        id: has_frontend
        run: |
          if [ -f frontend/Dockerfile ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build backend image (no push)
        if: steps.has_backend.outputs.exists == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: assetanchor-backend:scan
          load: true
        continue-on-error: true

      - name: Build frontend image (no push)
        if: steps.has_frontend.outputs.exists == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: assetanchor-frontend:scan
          load: true
        continue-on-error: true

      - name: Trivy scan backend
        if: steps.has_backend.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: assetanchor-backend:scan
          format: sarif
          output: trivy-backend-results.sarif
          ignore-unfixed: true
          vuln-type: "os,library"

      - name: Trivy scan frontend
        if: steps.has_frontend.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: assetanchor-frontend:scan
          format: sarif
          output: trivy-frontend-results.sarif
          ignore-unfixed: true
          vuln-type: "os,library"

      - name: Upload Trivy backend SARIF
        if: steps.has_backend.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-backend-results.sarif
          category: trivy-backend

      - name: Upload Trivy frontend SARIF
        if: steps.has_frontend.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-frontend-results.sarif
          category: trivy-frontend
