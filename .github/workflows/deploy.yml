name: deploy
on:
  push:
    branches: [ main ]

jobs:
  deploy-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy setup preparation
        run: echo "Preparing for deployment"

  deploy-api:
    runs-on: ubuntu-latest
    needs: [ deploy-setup ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4
      - name: Placeholder for API deployment
        run: |
          echo "This is a placeholder for the API deployment"
          echo "Actual deployment would use Render API to deploy services"
          set -euo pipefail
          DEPLOY_JSON=$(curl -fsS -X POST \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":false}')
          echo "$DEPLOY_JSON" | jq -r '.' || echo "$DEPLOY_JSON"
          DEPLOY_ID=$(echo "$DEPLOY_JSON" | jq -r '.id' || echo "")
      #     set -euo pipefail
      #     DEPLOY_JSON=$(curl -fsS -X POST \
      #       "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys" \
      #       -H "Authorization: Bearer ${RENDER_API_KEY}" \
      #       -H "Content-Type: application/json" \
      #       -d '{"clearCache":false}')
      #     echo "$DEPLOY_JSON" | jq .
      #     DEPLOY_ID=$(echo "$DEPLOY_JSON" | jq -r '.id')
      #     echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_OUTPUT

      # We'll restore these steps after initial CI setup is working
      # (C) Optionally: wait for Render deploy to finish (poll)
      # - name: Wait for Render deploy to complete
      #   env:
      #     RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      #     RENDER_SERVICE_ID_API: ${{ secrets.RENDER_SERVICE_ID_API }}
      #     DEPLOY_ID: ${{ steps.deploy_api.outputs.DEPLOY_ID }}
      #   run: |
      #     set -euo pipefail
      #     for i in {1..60}; do
      #       STATUS_JSON=$(curl -fsS \
      #         "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys/${DEPLOY_ID}" \
      #         -H "Authorization: Bearer ${RENDER_API_KEY}")
      #       STATUS=$(echo "$STATUS_JSON" | jq -r '.status')
      #       echo "Render status: $STATUS"
      #       if [ "$STATUS" = "live" ] || [ "$STATUS" = "succeeded" ]; then
      #         exit 0
      #       fi
      #       if [ "$STATUS" = "failed" ]; then
      #         echo "$STATUS_JSON"
      #         exit 1
      #       fi
      #       sleep 10
      #     done
      #     echo "Timeout waiting for Render deploy"
      #     exit 1

      # We'll restore these steps after initial CI setup is working
      # (D) Post-deploy smoke
      # - uses: actions/setup-python@v5
      #   with: { python-version: '3.11' }
      # - name: Install smoke deps
      #   working-directory: backend
      #   run: pip install -r requirements.txt
      # - name: Smoke test API
      #   working-directory: backend
      #   run: python scripts/smoke_test.py --base-url https://api.assetanchor.io

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ deploy-api ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4
      - name: Placeholder for frontend deployment
        run: |
          echo "This is a placeholder for the frontend deployment"
          echo "Actual deployment would build and deploy to Vercel"
          npm ci
          npm run build
      # Vercel deploy (production)
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend
          prod: true
