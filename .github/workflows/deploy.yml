# .github/workflows/deploy.yml
name: deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  fe-tests:
    name: Frontend tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install
        run: npm ci || npm install
      - name: Test
        run: npm run test:ci || npm test
      - name: Build (sanity)
        run: npm run build --if-present

  be-tests:
    name: Backend tests
    runs-on: ubuntu-latest
    needs: [ fe-tests ]
    defaults:
      run:
        working-directory: backend
    env:
      FLASK_ENV: test
      DATABASE_URL: sqlite:///test.db
      PYTHONPATH: ${{ github.workspace }}/backend/src
      RATELIMIT_STORAGE_URI: memory://
      DISABLE_RATE_LIMIT: "true"
      SENTRY_DSN: ""
      STRIPE_SECRET_KEY: "sk_test_dummy"
      STRIPE_WEBHOOK_SECRET: "whsec_dummy"
      TEST_AUTO_VERIFY_EMAIL: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Pytest
        run: python -m pytest -q --maxfail=1 --disable-warnings

  deploy-api:
    name: Deploy API to Render
    runs-on: ubuntu-latest
    needs: [ be-tests ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    outputs:
      deploy_id: ${{ steps.kick_api.outputs.deploy_id }}
    steps:
      - uses: actions/checkout@v4

      # Prefer Render API (gives us a deploy_id so we can poll)
      - name: Kick Render deploy via API
        id: kick_api
        if: ${{ secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID_API != '' }}
        run: |
          set -euo pipefail
          resp=$(curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":"do_not_clear"}' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_API }}/deploys")
          echo "API response: $resp"
          did=$(printf '%s' "$resp" | jq -r '.id')
          echo "deploy_id=$did" >> "$GITHUB_OUTPUT"

      # Fallback if you only have a deploy hook (no wait possible w/o API key)
      - name: Kick Render deploy via Deploy Hook (fallback)
        if: ${{ (steps.kick_api.outputs.deploy_id == '' || steps.kick_api.outcome == 'skipped') && secrets.RENDER_DEPLOY_HOOK_API != '' }}
        run: curl -fsS -X POST "${{ secrets.RENDER_DEPLOY_HOOK_API }}"

      # If we have an API deploy_id, poll until live/succeeded/failed
      - name: Wait for Render deploy to complete
        if: ${{ steps.kick_api.outputs.deploy_id != '' }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_API: ${{ secrets.RENDER_SERVICE_ID_API }}
          DEPLOY_ID: ${{ steps.kick_api.outputs.deploy_id }}
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          for i in {1..60}; do
            status_json=$(curl -fsS \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys/${DEPLOY_ID}")
            status=$(echo "$status_json" | jq -r '.status')
            echo "Render status: $status"
            if [ "$status" = "live" ] || [ "$status" = "succeeded" ]; then
              exit 0
            fi
            if [ "$status" = "failed" ]; then
              echo "$status_json"
              exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for Render deploy"
          exit 1

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [ deploy-api ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Deploy with Vercel
        if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_PROJECT_ID != '' && secrets.VERCEL_ORG_ID != '' }}
        uses: vercel/actions/deploy@v3
        with:
          working-directory: frontend
          token: ${{ secrets.VERCEL_TOKEN }}
          project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          org-id: ${{ secrets.VERCEL_ORG_ID }}
          prod: true
      - name: No Vercel credentials present â€“ skipping
        if: ${{ secrets.VERCEL_TOKEN == '' || secrets.VERCEL_PROJECT_ID == '' || secrets.VERCEL_ORG_ID == '' }}
        run: echo "Vercel secrets not set; skipping FE deploy"

  smoke:
    name: Post-deploy smoke test (optional)
    runs-on: ubuntu-latest
    needs: [ deploy-frontend ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && secrets.SMOKE_API_BASE_URL != '' }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Run smoke
        run: |
          python - <<'PY'
          import os, sys, urllib.request, json
          base = os.environ.get("SMOKE_API_BASE_URL")
          url = f"{base.rstrip('/')}/api/health"
          try:
            with urllib.request.urlopen(url, timeout=10) as r:
              body = r.read().decode()
              print("Health:", body)
            sys.exit(0)
          except Exception as e:
            print("Smoke failed:", e)
            sys.exit(1)
          PY
        env:
          SMOKE_API_BASE_URL: ${{ secrets.SMOKE_API_BASE_URL }}
