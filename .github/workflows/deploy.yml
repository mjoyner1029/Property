name: deploy
on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fe-tests:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci || npm install
      - run: npm run test:ci || npm test
      - run: npm run build --if-present

  be-tests:
    runs-on: ubuntu-latest
    needs: [ fe-tests ]
    defaults: { run: { working-directory: backend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements-dev.txt
      - name: Pytest (sqlite + in-memory limiter)
        env:
          FLASK_ENV: test
          DATABASE_URL: sqlite:///test.db
          PYTHONPATH: backend/src
          RATELIMIT_STORAGE_URI: memory://
          DISABLE_RATE_LIMIT: "true"
          SENTRY_DSN: ""
          STRIPE_SECRET_KEY: "sk_test_dummy"
          STRIPE_WEBHOOK_SECRET: "whsec_dummy"
        run: python -m pytest src/tests -q

  deploy-api:
    runs-on: ubuntu-latest
    needs: [ be-tests ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy API via Render API
        if: ${{ secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID_API != '' }}
        run: |
          curl -sS -X POST \
            -H "authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "content-type: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_API }}/deploys \
            -d '{}'
      - name: Deploy API via Render Deploy Hook
        if: ${{ secrets.RENDER_DEPLOY_HOOK_API != '' }}
        run: curl -sS -X POST "${{ secrets.RENDER_DEPLOY_HOOK_API }}"
      - name: No Render credentials present – skipping
        if: ${{ (secrets.RENDER_API_KEY == '' || secrets.RENDER_SERVICE_ID_API == '') && secrets.RENDER_DEPLOY_HOOK_API == '' }}
        run: echo "Render secrets not set; skipping API deploy"
        continue-on-error: true

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ deploy-api ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy with Vercel (guarded)
        if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_PROJECT_ID != '' && secrets.VERCEL_ORG_ID != '' }}
        run: |
          npm i -g vercel
          vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --confirm \
            --project ${{ secrets.VERCEL_PROJECT_ID }} --scope ${{ secrets.VERCEL_ORG_ID }}
      - name: No Vercel credentials present – skipping
        if: ${{ secrets.VERCEL_TOKEN == '' || secrets.VERCEL_PROJECT_ID == '' || secrets.VERCEL_ORG_ID == '' }}
        run: echo "Vercel secrets not set; skipping FE deploy"
        continue-on-error: true
      - name: Wait for Render deploy to complete
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_API: ${{ secrets.RENDER_SERVICE_ID_API }}
          DEPLOY_ID: ${{ steps.deploy_api.outputs.DEPLOY_ID }}
        run: |
          set -euo pipefail
          for i in {1..60}; do
            STATUS_JSON=$(curl -fsS \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys/${DEPLOY_ID}" \
              -H "Authorization: Bearer ${RENDER_API_KEY}")
            STATUS=$(echo "$STATUS_JSON" | jq -r '.status')
            echo "Render status: $STATUS"
            if [ "$STATUS" = "live" ] || [ "$STATUS" = "succeeded" ]; then
              exit 0
            fi
            if [ "$STATUS" = "failed" ]; then
              echo "$STATUS_JSON"
              exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for Render deploy"
          exit 1

      # (D) Post-deploy smoke
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install smoke deps
        working-directory: backend
        run: pip install -r requirements.txt
      - name: Smoke test API
        working-directory: backend
        run: python scripts/smoke_test.py --base-url https://api.assetanchor.io

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ deploy-api ]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node
        uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install & build
        working-directory: frontend
        run: |
          npm ci
          npm run build
      # Vercel deploy (production)
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          prod: true
