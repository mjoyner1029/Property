# .github/workflows/staging-bluegreen-rehearsal.yml

name: staging-bluegreen-rehearsal

on:
  workflow_dispatch:
    inputs:
      image_id:
        description: "Backend image/version hint (informational only)"
        required: false
        type: string
      fe_ref:
        description: "Frontend git ref to deploy as preview (e.g., branch or SHA)"
        required: false
        type: string

permissions:
  contents: read

concurrency:
  group: rehearse-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rehearse:
    name: Blue/Green Rehearsal (Staging)
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      # Staging endpoints (used for health checks)
      STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
      STAGING_FE_URL:  ${{ secrets.STAGING_FE_URL }}
      # Render (staging API)
      RENDER_API_KEY:  ${{ secrets.RENDER_API_KEY }}
      RENDER_SERVICE_ID_API: ${{ secrets.RENDER_SERVICE_ID_API }}
      # Vercel (staging/preview project)
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Preflight
        id: preflight
        run: |
          ok=true
          [ -z "${RENDER_API_KEY}" ] && echo "::warning::RENDER_API_KEY not set" && ok=false
          [ -z "${RENDER_SERVICE_ID_API}" ] && echo "::warning::RENDER_SERVICE_ID_API not set" && ok=false
          [ -z "${STAGING_API_URL}" ] && echo "::warning::STAGING_API_URL not set" && ok=false
          echo "can_run=$ok" >> "$GITHUB_OUTPUT"

      # --- Backend (Render) ---
      - name: Kick Render deploy (staging API)
        if: steps.preflight.outputs.can_run == 'true'
        id: render_deploy
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          body='{"clearCache":"do_not_clear"}'
          # carry the image_id (informational) in logs only
          [ -n "${{ github.event.inputs.image_id }}" ] && echo "Rehearsal image_id=${{ github.event.inputs.image_id }}"
          resp=$(curl -fsS -X POST \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "${body}" \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys")
          echo "API response: $resp"
          did=$(printf '%s' "$resp" | jq -r '.id')
          echo "deploy_id=$did" >> "$GITHUB_OUTPUT"

      - name: Wait for Render deploy
        if: steps.preflight.outputs.can_run == 'true'
        env:
          DEPLOY_ID: ${{ steps.render_deploy.outputs.deploy_id }}
        run: |
          set -euo pipefail
          for i in {1..60}; do
            status_json=$(curl -fsS \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID_API}/deploys/${DEPLOY_ID}")
            status=$(echo "$status_json" | jq -r '.status')
            echo "Render status: $status"
            if [ "$status" = "live" ] || [ "$status" = "succeeded" ]; then
              exit 0
            fi
            if [ "$status" = "failed" ]; then
              echo "$status_json"
              exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for Render deploy"
          exit 1

      - name: Smoke API health
        if: steps.preflight.outputs.can_run == 'true'
        run: |
          set -euo pipefail
          url="${STAGING_API_URL%/}/api/health"
          echo "Hitting: $url"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "Attempt $i -> HTTP $code"
            [ "$code" = "200" ] && break
            sleep 5
          done
          [ "$code" = "200" ] || (echo "API not healthy after deploy" && exit 1)

      # --- Frontend (Vercel Preview 'blue') ---
      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Checkout requested FE ref (optional)
        if: ${{ github.event.inputs.fe_ref != '' }}
        run: |
          set -e
          echo "Checking out FE ref: ${{ github.event.inputs.fe_ref }}"
          git fetch --all --tags
          git checkout "${{ github.event.inputs.fe_ref }}"

      - name: Deploy FE preview (blue)
        id: vercel_preview
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_PROJECT_ID != '' && env.VERCEL_ORG_ID != '' }}
        uses: vercel/actions/deploy@v3
        with:
          working-directory: frontend
          token: ${{ env.VERCEL_TOKEN }}
          project-id: ${{ env.VERCEL_PROJECT_ID }}
          org-id: ${{ env.VERCEL_ORG_ID }}
          prod: false

      - name: Smoke FE preview
        if: steps.vercel_preview.outputs.preview-url != ''
        run: |
          set -euo pipefail
          url="${{ steps.vercel_preview.outputs.preview-url }}"
          echo "Preview URL: $url"
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "Attempt $i -> HTTP $code"
            [ "$code" = "200" ] && break
            sleep 3
          done
          [ "$code" = "200" ] || (echo "Preview not healthy" && exit 1)

      - name: Smoke FE current staging domain (no switch)
        if: ${{ env.STAGING_FE_URL != '' }}
        run: |
          set -euo pipefail
          url="${STAGING_FE_URL}"
          echo "Staging FE URL: $url"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
          echo "FE HTTP $code"
          [ "$code" = "200" ] || (echo "Current staging FE not healthy" && exit 1)

      - name: Write summary
        if: always()
        run: |
          {
            echo "## Staging Blue/Green Rehearsal"
            echo ""
            echo "- Render deploy ID: `${{ steps.render_deploy.outputs.deploy_id }}`"
            echo "- API: `${STAGING_API_URL}` "
            if [ -n "${{ steps.vercel_preview.outputs.preview-url }}" ]; then
              echo "- FE preview (blue): `${{ steps.vercel_preview.outputs.preview-url }}` âœ…"
            else
              echo "- FE preview: (skipped / creds missing)"
            fi
            if [ -n "${STAGING_FE_URL}" ]; then
              echo "- FE current staging (green): \`${STAGING_FE_URL}\` "
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload rehearsal logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rehearsal-logs
          path: |
            frontend/.vercel/output/static/** 
          if-no-files-found: ignore
