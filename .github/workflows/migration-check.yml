name: Migration Verification

on:
  pull_request:
    branches:
      - main
    paths:
      - 'backend/migrations/**'
  workflow_dispatch: # Allow manual triggering

jobs:
  verify-migrations:
    name: Verify Database Migrations
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      
      - name: Install migration verification tools
        run: |
          pip install alembic psycopg2-binary
      
      - name: Run migration dry-run (upgrade)
        working-directory: backend
        run: |
          mkdir -p migration-artifacts
          
          echo "Running migration dry-run (upgrade path)..."
          export DATABASE_URL="postgresql://testuser:testpassword@localhost:5432/testdb"
          
          # Generate SQL without applying it
          alembic upgrade head --sql > migration-artifacts/upgrade.sql
          
          echo "Validating SQL upgrade script..."
          if [ -s migration-artifacts/upgrade.sql ]; then
            echo "✅ Upgrade SQL script generated successfully."
          else
            echo "❌ Empty upgrade SQL script. Check for issues in migration files."
            exit 1
          fi
      
      - name: Run migration dry-run (downgrade)
        working-directory: backend
        run: |
          echo "Running migration dry-run (downgrade path)..."
          export DATABASE_URL="postgresql://testuser:testpassword@localhost:5432/testdb"
          
          # Find current head revision
          HEAD_REVISION=$(alembic current)
          
          # Generate SQL for downgrade
          alembic downgrade base --sql > migration-artifacts/downgrade.sql
          
          echo "Validating SQL downgrade script..."
          if [ -s migration-artifacts/downgrade.sql ]; then
            echo "✅ Downgrade SQL script generated successfully."
          else
            echo "❌ Empty downgrade SQL script. Ensure all migrations have proper downgrade paths."
            exit 1
          fi
      
      - name: Verify actual migration application
        working-directory: backend
        run: |
          echo "Testing actual migration application..."
          export DATABASE_URL="postgresql://testuser:testpassword@localhost:5432/testdb"
          
          # Apply migrations
          alembic upgrade head
          
          # Check if successful
          if [ $? -eq 0 ]; then
            echo "✅ Migrations applied successfully."
          else
            echo "❌ Failed to apply migrations."
            exit 1
          fi
          
          # Test downgrade
          alembic downgrade base
          
          # Check if successful
          if [ $? -eq 0 ]; then
            echo "✅ Migrations rolled back successfully."
          else
            echo "❌ Failed to roll back migrations."
            exit 1
          fi
          
          # Go back to head for final check
          alembic upgrade head
      
      - name: Check for idempotent migrations
        working-directory: backend
        run: |
          echo "Checking for migration idempotency..."
          export DATABASE_URL="postgresql://testuser:testpassword@localhost:5432/testdb"
          
          # Get initial schema checksum
          pg_dump -h localhost -U testuser -d testdb -s > migration-artifacts/schema_initial.sql
          
          # Try to reapply migrations (should be idempotent)
          alembic upgrade head
          
          # Get final schema checksum
          pg_dump -h localhost -U testuser -d testdb -s > migration-artifacts/schema_after_reapply.sql
          
          # Compare checksums
          diff migration-artifacts/schema_initial.sql migration-artifacts/schema_after_reapply.sql
          
          if [ $? -eq 0 ]; then
            echo "✅ Migrations are idempotent."
          else
            echo "❌ Migrations are not idempotent. Reapplying them changes the schema."
            exit 1
          fi
        env:
          PGPASSWORD: testpassword
      
      - name: Upload migration artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: migration-artifacts
          path: backend/migration-artifacts/
          retention-days: 7
