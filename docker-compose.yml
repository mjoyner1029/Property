version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: assetanchor-backend-dev
    ports:
      - "5050:5050"
    volumes:
      - ./backend:/app
      - /app/node_modules  # Don't overwrite node_modules with host directory
    env_file:
      - ./backend/.env
    depends_on:
      - db
    restart: unless-stopped
    # Run database migrations on startup
    command: >
      bash -c "flask db upgrade && 
      python -m flask run --host=0.0.0.0 --port=5050"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Use a development-specific Dockerfile
    container_name: assetanchor-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Don't overwrite node_modules with host directory
    stdin_open: true
    tty: true
    environment:
      - REACT_APP_API_URL=http://localhost:5050/api
      - REACT_APP_SOCKET_URL=http://localhost:5050
      - NODE_ENV=development
    depends_on:
      - backend
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    container_name: property-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}  # Use env var with fallback
      POSTGRES_DB: asset_anchor
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  pgdata:
    driver: local
