"""
Test suite for Stripe webhook handler
"""
import pytest
import json
import stripe
from unittest.mock import patch, MagicMock
from datetime import datetime
from ..models.stripe_event import StripeEvent
from ..models.payment import Payment
from ..models.invoice import Invoice
from ..extensions import db

def test_stripe_webhook_without_signature(client, app):
    """Test webhook handler without signature verification in dev mode"""
    # Mock the stripe.Event.construct_from method
    with patch('stripe.Event.construct_from') as mock_construct:
        # Create a mock event
        mock_event = MagicMock()
        mock_event.id = 'evt_test123'
        mock_event.type = 'payment_intent.succeeded'
        mock_event.api_version = '2023-08-16'
        mock_event.created = int(datetime.now().timestamp())
        mock_event.data.object = {
            'id': 'pi_test123',
            'status': 'succeeded',
            'amount': 5000,  # $50.00
            'currency': 'usd'
        }
        
        mock_construct.return_value = mock_event
        
        # Send a webhook request without a signature header
        response = client.post(
            '/webhooks/stripe/',
            data=json.dumps({
                'id': 'evt_test123',
                'type': 'payment_intent.succeeded',
                'data': {
                    'object': {
                        'id': 'pi_test123',
                        'status': 'succeeded'
                    }
                }
            }),
            content_type='application/json'
        )
        
        assert response.status_code == 200
        
        # Verify event was stored in database
        with app.app_context():
            event = StripeEvent.query.filter_by(event_id='evt_test123').first()
            assert event is not None
            assert event.event_type == 'payment_intent.succeeded'

def test_stripe_webhook_duplicate_event(client, app):
    """Test handling duplicate webhook events"""
    # First, create an existing event in the database
    with app.app_context():
        existing_event = StripeEvent(
            event_id='evt_duplicate123',
            event_type='payment_intent.succeeded',
            created_at=datetime.utcnow(),
            processed_at=datetime.utcnow(),
            payload=json.dumps({'id': 'pi_test123'})
        )
        db.session.add(existing_event)
        db.session.commit()
    
    # Mock the stripe.Event.construct_from method
    with patch('stripe.Event.construct_from') as mock_construct:
        # Create a mock event with same ID
        mock_event = MagicMock()
        mock_event.id = 'evt_duplicate123'
        mock_event.type = 'payment_intent.succeeded'
        mock_event.api_version = '2023-08-16'
        mock_event.created = int(datetime.now().timestamp())
        mock_event.data.object = {
            'id': 'pi_test123',
            'status': 'succeeded'
        }
        
        mock_construct.return_value = mock_event
        
        # Send duplicate webhook request
        response = client.post(
            '/webhooks/stripe/',
            data=json.dumps({
                'id': 'evt_duplicate123',
                'type': 'payment_intent.succeeded'
            }),
            content_type='application/json'
        )
        
        assert response.status_code == 200
        assert json.loads(response.data)['message'] == 'Duplicate event'
        
        # Check we still only have one event in the database
        with app.app_context():
            count = StripeEvent.query.filter_by(event_id='evt_duplicate123').count()
            assert count == 1

def test_payment_intent_succeeded(client, app, test_users):
    """Test handling payment_intent.succeeded event"""
    # Create a payment in the database
    with app.app_context():
        payment = Payment(
            tenant_id=test_users['tenant'].id,
            landlord_id=test_users['landlord'].id,
            amount=50.0,
            amount_cents=5000,
            currency='usd',
            status='pending',
            payment_intent_id='pi_test123',
            created_at=datetime.utcnow()
        )
        db.session.add(payment)
        db.session.commit()
    
    # Mock the stripe.Event.construct_from method
    with patch('stripe.Event.construct_from') as mock_construct:
        mock_event = MagicMock()
        mock_event.id = 'evt_succeeded123'
        mock_event.type = 'payment_intent.succeeded'
        mock_event.api_version = '2023-08-16'
        mock_event.created = int(datetime.now().timestamp())
        mock_event.data.object = {
            'id': 'pi_test123',
            'status': 'succeeded',
            'amount': 5000,
            'currency': 'usd'
        }
        
        mock_construct.return_value = mock_event
        
        # Send webhook request
        response = client.post(
            '/webhooks/stripe/',
            data=json.dumps({
                'id': 'evt_succeeded123',
                'type': 'payment_intent.succeeded',
                'data': {
                    'object': {
                        'id': 'pi_test123',
                        'status': 'succeeded'
                    }
                }
            }),
            content_type='application/json'
        )
        
        assert response.status_code == 200
        
        # Verify payment was updated
        with app.app_context():
            payment = Payment.query.filter_by(payment_intent_id='pi_test123').first()
            assert payment.status == 'paid'
            assert payment.completed_at is not None

def test_invoice_payment_succeeded(client, app, test_users):
    """Test handling invoice.payment_succeeded event for invoice update"""
    # Create invoice and payment in the database
    with app.app_context():
        invoice = Invoice(
            tenant_id=test_users['tenant'].id,
            landlord_id=test_users['landlord'].id,
            property_id=1,
            amount=50.0,
            amount_cents=5000,
            currency='usd',
            due_date=datetime.utcnow(),
            description='Monthly Rent',
            status='pending'
        )
        db.session.add(invoice)
        db.session.flush()
        
        payment = Payment(
            tenant_id=test_users['tenant'].id,
            landlord_id=test_users['landlord'].id,
            invoice_id=invoice.id,
            amount=50.0,
            amount_cents=5000,
            currency='usd',
            status='paid',
            payment_intent_id='pi_invoice123',
            completed_at=datetime.utcnow()
        )
        db.session.add(payment)
        db.session.commit()
    
    # Mock the stripe.Event.construct_from method
    with patch('stripe.Event.construct_from') as mock_construct:
        mock_event = MagicMock()
        mock_event.id = 'evt_invoice123'
        mock_event.type = 'invoice.payment_succeeded'
        mock_event.api_version = '2023-08-16'
        mock_event.created = int(datetime.now().timestamp())
        mock_event.data.object = {
            'id': 'in_test123',
            'payment_intent': 'pi_invoice123',
            'status': 'paid'
        }
        
        mock_construct.return_value = mock_event
        
        # Send webhook request
        response = client.post(
            '/webhooks/stripe/',
            data=json.dumps({
                'id': 'evt_invoice123',
                'type': 'invoice.payment_succeeded'
            }),
            content_type='application/json'
        )
        
        assert response.status_code == 200
        
        # Verify invoice was updated
        with app.app_context():
            invoice = Invoice.query.get(invoice.id)
            assert invoice.status == 'paid'
            assert invoice.paid_at is not None

def test_signature_verification_with_secret(client, app, monkeypatch):
    """Test webhook signature verification when STRIPE_WEBHOOK_SECRET is set"""
    # Set webhook secret in app config
    monkeypatch.setitem(app.config, 'STRIPE_WEBHOOK_SECRET', 'whsec_test')
    
    # Mock the stripe.Webhook.construct_event method
    with patch('stripe.Webhook.construct_event') as mock_construct:
        mock_event = MagicMock()
        mock_event.id = 'evt_signed123'
        mock_event.type = 'payment_intent.succeeded'
        mock_event.api_version = '2023-08-16'
        mock_event.created = int(datetime.now().timestamp())
        mock_event.data.object = {
            'id': 'pi_signed123',
            'status': 'succeeded'
        }
        
        mock_construct.return_value = mock_event
        
        # Send webhook request with signature header
        response = client.post(
            '/webhooks/stripe/',
            data=json.dumps({
                'id': 'evt_signed123',
                'type': 'payment_intent.succeeded'
            }),
            content_type='application/json',
            headers={'Stripe-Signature': 'test_signature'}
        )
        
        assert response.status_code == 200
        
        # Verify webhook.construct_event was called with correct params
        mock_construct.assert_called_once()
        args, kwargs = mock_construct.call_args
        assert len(args) == 3
        assert args[1] == 'test_signature'
        assert args[2] == 'whsec_test'
        
        # Verify event was stored in database
        with app.app_context():
            event = StripeEvent.query.filter_by(event_id='evt_signed123').first()
            assert event is not None
