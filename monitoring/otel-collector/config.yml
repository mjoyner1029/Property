receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      paging:
      process:
  
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8888']

processors:
  batch:
    send_batch_size: 10000
    timeout: 10s
  
  memory_limiter:
    check_interval: 1s
    limit_mib: 1000
    spike_limit_mib: 200
  
  resource:
    attributes:
      - key: service.namespace
        value: property
        action: upsert
      - key: deployment.environment
        from_attribute: DEPLOYMENT_ENVIRONMENT
        default_value: production
        action: upsert

  k8s_tagger:
    extract:
      metadata:
        - namespace
        - node
        - podName
        - podUID
      labels:
        - app
        - app.kubernetes.io/instance
        - app.kubernetes.io/name
        - app.kubernetes.io/component

  transform:
    metric_statements:
      - context: metric
        statements:
          - set(description, "Configured by the OpenTelemetry Collector") where name == "system.cpu.time"
      
      - context: datapoint
        statements:
          - set(metric.name, "http.server.request.duration") where metric.name == "http.server.duration"

exporters:
  prometheus:
    endpoint: 0.0.0.0:8889
  
  otlp:
    endpoint: tempo:4317
    tls:
      insecure: true
  
  otlphttp/prometheus:
    endpoint: http://prometheus:9090/api/v1/otlp
    tls:
      insecure: true
  
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    tenant_id: property
    labels:
      resource:
        service.name: "service_name"
        service.namespace: "service_namespace"
        service.instance.id: "service_instance_id"
      attributes:
        level: "severity_text"
        app: "service.name"

  logging:
    verbosity: detailed

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, k8s_tagger]
      exporters: [otlp, logging]
    
    metrics:
      receivers: [otlp, hostmetrics, prometheus]
      processors: [memory_limiter, batch, resource, transform, k8s_tagger]
      exporters: [prometheus, otlphttp/prometheus, logging]
    
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, k8s_tagger]
      exporters: [loki, logging]

  extensions: []
